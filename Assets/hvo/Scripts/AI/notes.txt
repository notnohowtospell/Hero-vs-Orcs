

Mnahattan Distance -> d = |x1 - x2| + |y1 - y2|

if (dstX > dstY)
{
  return 14 * dstY + 10 * (dstX - dstY);
}

return 14 * dstX + 10 * (dstY - dstX);

10 = orthogonal move
14 = diagonal move

------

## A* ##

gCost -> cost from start node to candidate node
hCost -> cost from candidate to end node
fCost -> gCost + hCost


-> Create Open List (OL) = []
-> Create Close List (CL) = []
-> Start Node (SN) = (0,0)
-> End Node (EN) = (4,4)


-> Add SN to OL
OL = [(0,0)]

g(0,0) = 0
h(0,0) = (0,0) -> (4,4) = dstX = |0 - 4|  = 4; dstY = |0 - 4| = 4;
h = 14 * 4 + 10 * 0 = 56
f = 56

OL = []
CL = [(0,0)]

Active Node is (0,0)

-- (1,0) -> Set Parent to (0,0) --
g(1,0) = 10
h(1,0) = dstx = 3; dstY = 4; h = 14 * 3 + 10 * 1 = 52
f(1,0) = 62

-- (1,1) -> Set Parent to (0,0) --
g(1,1) = 14
h(1,1) = dstX = 3; dstY = 3; h = 14 * 3 + 10 * 0 = 42;
f(1,1) = 56

-- (0,1) -> Set Parent to (0,0) --
g(0,1) = g(0,0) + Orthogonal Move = 10;
h(0,1) = dstX = 4; dstY = 3; h = 14 * 3 + 10 * 1 = 52;
f(0,1) = 62

-> Add All Neighbours to OL

OL = [(1,0), (1,1), (0,1)]
CL = [(0,0)]

-> Choose one with smallest F and move it to CL

OL = [(1,0), (0,1)]
CL = [(0,0), (1,1)]

-> Choose (1,1) as Active Node

-- (1,2) -> Set Parent (1,1) --
g(1,2) = g(1,1) + Orthogonal Move = 14 + 10 = 24
h(1,2) = 38
f(1,2) = 62

-- (2,2) -> Set Parent (1,1) --
g(2,2) = g(1,1) + Diagonal Move = 14 + 14 = 28;
h(2,2) = 28;
f(2,2) = 56;

-- (2,0) -> Set Parent (1,1) --
g(2,0) = g(1,1) + Diagonal Move = 14 + 14 = 28;
h(2,0) = 48;
f(2,0) = 76;

-- (0,1) -> Already in OL -> It has Parent (0,0) --

What about parenting? Set it to (1,1) ? NOT YET! First compute "new" or "tentative" G for (0,1), Because (0,1) has already gCost

tg(0,1) = g(1,1) + Orthogonal Move = 14 + 10 = 24;

Compare tg(0,1) with existing g(0,1); tg(0,1) = 24; g(0,1) = 10; tg > g; 24 > 10 -> No Action Needed!

-- (1,0) -> Already in OL -> It has Parent (0,0) --
tg(1,0) = g(1,1) + Orthogonal Move = 14 + 10 = 24;
tg(1,0) = 24; g(1,0) = 10; 24 > 10 -> No Action Needed!

-> Add Neighbours to OL if they are not there already


OL = [(1,0), (0,1), (1,2), (2,2), (2,0)]

-> Choose the node with smallest F,
-> Move (2,2) to CL and Set as Active Node

OL = [(1,0), (0,1), (1,2), (2,0)]
CL = [(0,0), (1,1), (2,2)]

Active Node is (2,2)

-- (1,2) -> Already in OL -> It has Parent (1,1) --
tg(1,2) = g(2,2) + Orthogonal Move = 28 + 10 = 38;
tg(1,2) = 38; g(1,2) = 24; 38 > 24 -> No Action Needed!

-> No other neigbours to evaluate

OL = [(1,0), (0,1), (1,2), (2,0)]

-> Choose the first with lowest f, (1,0) and move it to CL

OL = [(0,1), (1,2), (2,0)]
CL = [(0,0), (1,1), (2,2), (1,0)]

-> Active Node is (1,0)

-- (2,0) -> Already in OL -> It has Parent (1,1) --
tg(2,0) = g(1,0) + Orthogonal move = 10 + 10 = 20;
tg(2,0) = 20; g(2,0) = 28; 20 < 28 -> Action Needed! -> Update gCost, fCost and Parent!

-> update g(2,0) to 20
-> recalculate f; f(2,0) = g(2,0) + h(2,0) = 20 + 48 = 68
-> update parent to (1,0)

... chcek all neigbours
... Choose the next active node and move it to CL
... Do this until active node != End node

-> Final Stage CL

 Node -> Parent
(0,0)	Start Node (no parent)
(1,0) -> (0,0)
(0,1) -> (0,0)
(1,1) -> (0,0)
(1,2) -> (1,1)
(2,0) -> (1,0)
(2,2) -> (1,1)
(3,0) -> (2,0)
(4,1) -> (3,0)
(4,2) -> (4,1)
(4,3) -> (4,2)
(4,4) -> (4,3)


(4,4) -> (4,3) -> (4,2) -> (4,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0)


(0,0) -> (1,0) -> (2,0) -> (3,0) -> (4,1) -> (4,2) -> (4,3) -> (4,4)
